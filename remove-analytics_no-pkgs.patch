diff --git a/browser/lib/newNote.js b/browser/lib/newNote.js
index bed69735..e1be0b15 100644
--- a/browser/lib/newNote.js
+++ b/browser/lib/newNote.js
@@ -1,11 +1,11 @@
 import { hashHistory } from 'react-router'
 import dataApi from 'browser/main/lib/dataApi'
 import ee from 'browser/main/lib/eventEmitter'
-import AwsMobileAnalyticsConfig from 'browser/main/lib/AwsMobileAnalyticsConfig'
+
 
 export function createMarkdownNote (storage, folder, dispatch, location) {
-  AwsMobileAnalyticsConfig.recordDynamicCustomEvent('ADD_MARKDOWN')
-  AwsMobileAnalyticsConfig.recordDynamicCustomEvent('ADD_ALLNOTE')
+
+
   return dataApi
     .createNote(storage, {
       type: 'MARKDOWN_NOTE',
@@ -30,8 +30,8 @@ export function createMarkdownNote (storage, folder, dispatch, location) {
 }
 
 export function createSnippetNote (storage, folder, dispatch, location, config) {
-  AwsMobileAnalyticsConfig.recordDynamicCustomEvent('ADD_SNIPPET')
-  AwsMobileAnalyticsConfig.recordDynamicCustomEvent('ADD_ALLNOTE')
+
+
   return dataApi
     .createNote(storage, {
       type: 'SNIPPET_NOTE',
diff --git a/browser/main/Detail/MarkdownNoteDetail.js b/browser/main/Detail/MarkdownNoteDetail.js
index f7f18d4c..e88da8e9 100755
--- a/browser/main/Detail/MarkdownNoteDetail.js
+++ b/browser/main/Detail/MarkdownNoteDetail.js
@@ -15,7 +15,7 @@ import markdown from 'browser/lib/markdownTextHelper'
 import StatusBar from '../StatusBar'
 import _ from 'lodash'
 import { findNoteTitle } from 'browser/lib/findNoteTitle'
-import AwsMobileAnalyticsConfig from 'browser/main/lib/AwsMobileAnalyticsConfig'
+
 import ConfigManager from 'browser/main/lib/ConfigManager'
 import TrashButton from './TrashButton'
 import FullscreenButton from './FullscreenButton'
@@ -123,7 +123,7 @@ class MarkdownNoteDetail extends React.Component {
           type: 'UPDATE_NOTE',
           note: note
         })
-        AwsMobileAnalyticsConfig.recordDynamicCustomEvent('EDIT_NOTE')
+
       })
   }
 
@@ -162,7 +162,7 @@ class MarkdownNoteDetail extends React.Component {
 
   handleStarButtonClick (e) {
     const { note } = this.state
-    if (!note.isStarred) AwsMobileAnalyticsConfig.recordDynamicCustomEvent('ADD_STAR')
+
 
     note.isStarred = !note.isStarred
 
diff --git a/browser/main/Detail/SnippetNoteDetail.js b/browser/main/Detail/SnippetNoteDetail.js
index 65d5dfd3..f85fb287 100644
--- a/browser/main/Detail/SnippetNoteDetail.js
+++ b/browser/main/Detail/SnippetNoteDetail.js
@@ -19,7 +19,7 @@ import ConfigManager from 'browser/main/lib/ConfigManager'
 import _ from 'lodash'
 import {findNoteTitle} from 'browser/lib/findNoteTitle'
 import convertModeName from 'browser/lib/convertModeName'
-import AwsMobileAnalyticsConfig from 'browser/main/lib/AwsMobileAnalyticsConfig'
+
 import TrashButton from './TrashButton'
 import RestoreButton from './RestoreButton'
 import PermanentDeleteButton from './PermanentDeleteButton'
@@ -140,7 +140,7 @@ class SnippetNoteDetail extends React.Component {
           type: 'UPDATE_NOTE',
           note: note
         })
-        AwsMobileAnalyticsConfig.recordDynamicCustomEvent('EDIT_NOTE')
+
       })
   }
 
@@ -179,7 +179,7 @@ class SnippetNoteDetail extends React.Component {
 
   handleStarButtonClick (e) {
     const { note } = this.state
-    if (!note.isStarred) AwsMobileAnalyticsConfig.recordDynamicCustomEvent('ADD_STAR')
+
 
     note.isStarred = !note.isStarred
 
@@ -377,9 +377,6 @@ class SnippetNoteDetail extends React.Component {
     const mode = syntax != null ? syntax.name : null
     if (mode != null) {
       snippets[index].mode = mode
-      AwsMobileAnalyticsConfig.recordDynamicCustomEvent('SNIPPET_LANG', {
-        name: mode
-      })
     }
     this.setState(state => ({note: Object.assign(state.note, {snippets: snippets})}))
 
@@ -401,10 +398,6 @@ class SnippetNoteDetail extends React.Component {
       }), () => {
         this.save()
       })
-
-      AwsMobileAnalyticsConfig.recordDynamicCustomEvent('SELECT_LANG', {
-        name
-      })
     }
   }
 
diff --git a/browser/main/Detail/TagSelect.js b/browser/main/Detail/TagSelect.js
index eb160e4c..1e6ea60c 100644
--- a/browser/main/Detail/TagSelect.js
+++ b/browser/main/Detail/TagSelect.js
@@ -3,7 +3,7 @@ import React from 'react'
 import CSSModules from 'browser/lib/CSSModules'
 import styles from './TagSelect.styl'
 import _ from 'lodash'
-import AwsMobileAnalyticsConfig from 'browser/main/lib/AwsMobileAnalyticsConfig'
+
 import i18n from 'browser/lib/i18n'
 import ee from 'browser/main/lib/eventEmitter'
 import Autosuggest from 'react-autosuggest'
@@ -27,7 +27,7 @@ class TagSelect extends React.Component {
   }
 
   addNewTag (newTag) {
-    AwsMobileAnalyticsConfig.recordDynamicCustomEvent('ADD_TAG')
+
 
     newTag = newTag.trim().replace(/ +/g, '_')
     if (newTag.charAt(0) === '#') {
diff --git a/browser/main/Main.js b/browser/main/Main.js
index 1ffb2f74..dcad4e65 100644
--- a/browser/main/Main.js
+++ b/browser/main/Main.js
@@ -10,7 +10,6 @@ import Detail from './Detail'
 import dataApi from 'browser/main/lib/dataApi'
 import _ from 'lodash'
 import ConfigManager from 'browser/main/lib/ConfigManager'
-import mobileAnalytics from 'browser/main/lib/AwsMobileAnalyticsConfig'
 import eventEmitter from 'browser/main/lib/eventEmitter'
 import { hashHistory } from 'react-router'
 import store from 'browser/main/store'
@@ -25,9 +24,6 @@ class Main extends React.Component {
   constructor (props) {
     super(props)
 
-    if (process.env.NODE_ENV === 'production') {
-      mobileAnalytics.initAwsMobileAnalytics()
-    }
 
     const { config } = props
 
diff --git a/browser/main/NoteList/index.js b/browser/main/NoteList/index.js
index 30ad93c3..fa85095e 100644
--- a/browser/main/NoteList/index.js
+++ b/browser/main/NoteList/index.js
@@ -17,7 +17,7 @@ import fs from 'fs'
 import path from 'path'
 import { hashHistory } from 'react-router'
 import copy from 'copy-to-clipboard'
-import AwsMobileAnalyticsConfig from 'browser/main/lib/AwsMobileAnalyticsConfig'
+
 import Markdown from '../../lib/markdown'
 import i18n from 'browser/lib/i18n'
 import { confirmDeleteNote } from 'browser/lib/confirmDeleteNote'
@@ -635,7 +635,7 @@ class NoteList extends React.Component {
             note: newNote
           })
         })
-        AwsMobileAnalyticsConfig.recordDynamicCustomEvent('EDIT_NOTE')
+
         console.log('Notes went to trash')
       })
       .catch((err) => {
@@ -654,8 +654,8 @@ class NoteList extends React.Component {
     const firstNote = selectedNotes[0]
     const eventName = firstNote.type === 'MARKDOWN_NOTE' ? 'ADD_MARKDOWN' : 'ADD_SNIPPET'
 
-    AwsMobileAnalyticsConfig.recordDynamicCustomEvent(eventName)
-    AwsMobileAnalyticsConfig.recordDynamicCustomEvent('ADD_ALLNOTE')
+
+
     dataApi
       .createNote(storage.key, {
         type: firstNote.type,
diff --git a/browser/main/lib/AwsMobileAnalyticsConfig.js b/browser/main/lib/AwsMobileAnalyticsConfig.js
deleted file mode 100644
index 1ef4f8da..00000000
--- a/browser/main/lib/AwsMobileAnalyticsConfig.js
+++ /dev/null
@@ -1,82 +0,0 @@
-const AWS = require('aws-sdk')
-const AMA = require('aws-sdk-mobile-analytics')
-const ConfigManager = require('browser/main/lib/ConfigManager')
-
-const remote = require('electron').remote
-const os = require('os')
-let mobileAnalyticsClient
-
-AWS.config.region = 'us-east-1'
-if (!getSendEventCond()) {
-  AWS.config.credentials = new AWS.CognitoIdentityCredentials({
-    IdentityPoolId: 'us-east-1:xxxxxxxxxxxxxxxxxxxxxxxxx'
-  })
-
-  const validPlatformName = convertPlatformName(os.platform())
-
-  mobileAnalyticsClient = new AMA.Manager({
-    appId: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
-    appTitle: 'xxxxxxxxxx',
-    appVersionName: remote.app.getVersion().toString(),
-    platform: validPlatformName
-  })
-}
-
-function convertPlatformName (platformName) {
-  if (platformName === 'darwin') {
-    return 'MacOS'
-  } else if (platformName === 'win32') {
-    return 'Windows'
-  } else if (platformName === 'linux') {
-    return 'Linux'
-  } else {
-    return ''
-  }
-}
-
-function getSendEventCond () {
-  const isDev = process.env.NODE_ENV !== 'production'
-  const isDisable = !ConfigManager.default.get().amaEnabled
-  const isOffline = !window.navigator.onLine
-  return isDev || isDisable || isOffline
-}
-
-function initAwsMobileAnalytics () {
-  if (getSendEventCond()) return
-  AWS.config.credentials.get((err) => {
-    if (!err) {
-      console.log('Cognito Identity ID: ' + AWS.config.credentials.identityId)
-      recordDynamicCustomEvent('APP_STARTED')
-      recordStaticCustomEvent()
-    }
-  })
-}
-
-function recordDynamicCustomEvent (type, options = {}) {
-  if (getSendEventCond()) return
-  try {
-    mobileAnalyticsClient.recordEvent(type, options)
-  } catch (analyticsError) {
-    if (analyticsError instanceof ReferenceError) {
-      console.log(analyticsError.name + ': ' + analyticsError.message)
-    }
-  }
-}
-
-function recordStaticCustomEvent () {
-  if (getSendEventCond()) return
-  try {
-    mobileAnalyticsClient.recordEvent('UI_COLOR_THEME', {
-      uiColorTheme: ConfigManager.default.get().ui.theme
-    })
-  } catch (analyticsError) {
-    if (analyticsError instanceof ReferenceError) {
-      console.log(analyticsError.name + ': ' + analyticsError.message)
-    }
-  }
-}
-
-module.exports = {
-  initAwsMobileAnalytics,
-  recordDynamicCustomEvent
-}
diff --git a/browser/main/modals/CreateFolderModal.js b/browser/main/modals/CreateFolderModal.js
index b061b0f3..9a0b42ae 100644
--- a/browser/main/modals/CreateFolderModal.js
+++ b/browser/main/modals/CreateFolderModal.js
@@ -6,7 +6,7 @@ import dataApi from 'browser/main/lib/dataApi'
 import store from 'browser/main/store'
 import consts from 'browser/lib/consts'
 import ModalEscButton from 'browser/components/ModalEscButton'
-import AwsMobileAnalyticsConfig from 'browser/main/lib/AwsMobileAnalyticsConfig'
+
 import i18n from 'browser/lib/i18n'
 
 class CreateFolderModal extends React.Component {
@@ -51,7 +51,7 @@ class CreateFolderModal extends React.Component {
   }
 
   confirm () {
-    AwsMobileAnalyticsConfig.recordDynamicCustomEvent('ADD_FOLDER')
+
     if (this.state.name.trim().length > 0) {
       const { storage } = this.props
       const input = {
diff --git a/browser/main/modals/PreferencesModal/InfoTab.js b/browser/main/modals/PreferencesModal/InfoTab.js
index a6acc963..a4810ba0 100644
--- a/browser/main/modals/PreferencesModal/InfoTab.js
+++ b/browser/main/modals/PreferencesModal/InfoTab.js
@@ -3,7 +3,7 @@ import CSSModules from 'browser/lib/CSSModules'
 import styles from './InfoTab.styl'
 import ConfigManager from 'browser/main/lib/ConfigManager'
 import store from 'browser/main/store'
-import AwsMobileAnalyticsConfig from 'browser/main/lib/AwsMobileAnalyticsConfig'
+
 import _ from 'lodash'
 import i18n from 'browser/lib/i18n'
 
@@ -37,7 +37,7 @@ class InfoTab extends React.Component {
     }
 
     if (!newConfig.amaEnabled) {
-      AwsMobileAnalyticsConfig.recordDynamicCustomEvent('DISABLE_AMA')
+
       this.setState({
         amaMessage: i18n.__('We hope we will gain your trust')
       })
diff --git a/gruntfile.js b/gruntfile.js
index ec3bbf79..0529e1c8 100644
--- a/gruntfile.js
+++ b/gruntfile.js
@@ -75,11 +75,7 @@ module.exports = function (grunt) {
 
   grunt.initConfig(initConfig)
   grunt.loadNpmTasks('grunt-electron-installer')
-  if (!WIN) {
-    grunt.loadNpmTasks('grunt-electron-installer-debian')
-    grunt.loadNpmTasks('grunt-electron-installer-redhat')
-  }
-
+  
   grunt.registerTask('compile', function () {
     var done = this.async()
     var execPath = path.join('node_modules', '.bin', 'webpack') + ' --config webpack-production.config.js'
@@ -265,7 +261,7 @@ module.exports = function (grunt) {
         grunt.task.run(['compile', 'pack:osx', 'codesign', 'create-osx-installer', 'zip:osx'])
         break
       case 'linux':
-        grunt.task.run(['compile', 'pack:linux', 'electron-installer-debian', 'electron-installer-redhat'])
+        grunt.task.run(['compile', 'pack:linux'])
         break
     }
   })
